/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var vbs = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"primary_expression":3,"IDENITIFIER":4,"NUMBER":5,"STR_CONST":6,"(":7,"expression":8,")":9,"script":10,"expr_list":11,"EOF":12,"expr":13,"assignment":14,"IDENTIFIER":15,"=":16,"add_expr":17,"term":18,"add_op":19,"factor":20,"mult_op":21,"function_call":22,"+":23,"-":24,"*":25,"/":26,"arg_list":27,"obj":28,",":29,"function_def":30,"FUNCTION":31,"END":32,"constant":33,"comp_op":34,"LE_OP":35,"NE_OP":36,"GE_OP":37,"<":38,">":39,"condition_list":40,"condition":41,"AND":42,"OR":43,"else_if_clause":44,"ELSEIF":45,"THEN":46,"if_statement":47,"IF":48,"ELSE":49,"for_statement":50,"FOR":51,"TO":52,"NEXT":53,"DIM":54,"OPTION":55,"EXPLICIT":56,"CALL":57,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENITIFIER",5:"NUMBER",6:"STR_CONST",7:"(",8:"expression",9:")",12:"EOF",15:"IDENTIFIER",16:"=",23:"+",24:"-",25:"*",26:"/",29:",",31:"FUNCTION",32:"END",35:"LE_OP",36:"NE_OP",37:"GE_OP",38:"<",39:">",42:"AND",43:"OR",45:"ELSEIF",46:"THEN",48:"IF",49:"ELSE",51:"FOR",52:"TO",53:"NEXT",54:"DIM",55:"OPTION",56:"EXPLICIT",57:"CALL"},
productions_: [0,[3,1],[3,1],[3,1],[3,3],[10,2],[11,1],[11,2],[14,3],[17,1],[17,3],[18,1],[18,3],[20,1],[20,1],[20,1],[19,1],[19,1],[21,1],[21,1],[27,1],[27,3],[22,4],[30,8],[28,1],[28,1],[33,1],[33,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[40,1],[40,3],[40,3],[41,3],[44,4],[44,5],[47,6],[47,8],[47,7],[47,9],[50,8],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{10:1,11:2,13:3,14:10,15:[1,14],30:9,31:[1,13],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{1:[3]},{12:[1,15],13:16,14:10,15:[1,14],30:9,31:[1,13],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{12:[2,6],15:[2,6],31:[2,6],32:[2,6],45:[2,6],48:[2,6],49:[2,6],51:[2,6],53:[2,6],54:[2,6],55:[2,6],57:[2,6]},{15:[1,17]},{56:[1,18]},{15:[1,20],22:19},{12:[2,48],15:[2,48],31:[2,48],32:[2,48],45:[2,48],48:[2,48],49:[2,48],51:[2,48],53:[2,48],54:[2,48],55:[2,48],57:[2,48]},{12:[2,49],15:[2,49],31:[2,49],32:[2,49],45:[2,49],48:[2,49],49:[2,49],51:[2,49],53:[2,49],54:[2,49],55:[2,49],57:[2,49]},{12:[2,50],15:[2,50],31:[2,50],32:[2,50],45:[2,50],48:[2,50],49:[2,50],51:[2,50],53:[2,50],54:[2,50],55:[2,50],57:[2,50]},{12:[2,51],15:[2,51],31:[2,51],32:[2,51],45:[2,51],48:[2,51],49:[2,51],51:[2,51],53:[2,51],54:[2,51],55:[2,51],57:[2,51]},{15:[1,23],40:21,41:22},{15:[1,24]},{15:[1,25]},{16:[1,26]},{1:[2,5]},{12:[2,7],15:[2,7],31:[2,7],32:[2,7],45:[2,7],48:[2,7],49:[2,7],51:[2,7],53:[2,7],54:[2,7],55:[2,7],57:[2,7]},{12:[2,45],15:[2,45],31:[2,45],32:[2,45],45:[2,45],48:[2,45],49:[2,45],51:[2,45],53:[2,45],54:[2,45],55:[2,45],57:[2,45]},{12:[2,46],15:[2,46],31:[2,46],32:[2,46],45:[2,46],48:[2,46],49:[2,46],51:[2,46],53:[2,46],54:[2,46],55:[2,46],57:[2,46]},{12:[2,47],15:[2,47],31:[2,47],32:[2,47],45:[2,47],48:[2,47],49:[2,47],51:[2,47],53:[2,47],54:[2,47],55:[2,47],57:[2,47]},{7:[1,27]},{42:[1,29],43:[1,30],46:[1,28]},{42:[2,34],43:[2,34],46:[2,34]},{16:[1,37],34:31,35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36]},{16:[1,38]},{7:[1,39]},{5:[1,44],15:[1,43],17:40,18:41,20:42,22:45},{5:[1,44],6:[1,48],15:[1,43],17:49,18:41,20:42,22:45,27:46,28:47},{11:50,13:3,14:10,15:[1,14],30:9,31:[1,13],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{15:[1,23],41:51},{15:[1,23],41:52},{5:[1,54],6:[1,55],33:53},{5:[2,28],6:[2,28]},{5:[2,29],6:[2,29]},{5:[2,30],6:[2,30]},{5:[2,31],6:[2,31]},{5:[2,32],6:[2,32]},{5:[2,33],6:[2,33]},{5:[1,56]},{5:[1,44],6:[1,48],15:[1,43],17:49,18:41,20:42,22:45,27:57,28:47},{12:[2,8],15:[2,8],19:58,23:[1,59],24:[1,60],31:[2,8],32:[2,8],45:[2,8],48:[2,8],49:[2,8],51:[2,8],53:[2,8],54:[2,8],55:[2,8],57:[2,8]},{9:[2,9],12:[2,9],15:[2,9],21:61,23:[2,9],24:[2,9],25:[1,62],26:[1,63],29:[2,9],31:[2,9],32:[2,9],45:[2,9],48:[2,9],49:[2,9],51:[2,9],53:[2,9],54:[2,9],55:[2,9],57:[2,9]},{9:[2,11],12:[2,11],15:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],29:[2,11],31:[2,11],32:[2,11],45:[2,11],48:[2,11],49:[2,11],51:[2,11],53:[2,11],54:[2,11],55:[2,11],57:[2,11]},{7:[1,27],9:[2,13],12:[2,13],15:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],29:[2,13],31:[2,13],32:[2,13],45:[2,13],48:[2,13],49:[2,13],51:[2,13],53:[2,13],54:[2,13],55:[2,13],57:[2,13]},{9:[2,14],12:[2,14],15:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],29:[2,14],31:[2,14],32:[2,14],45:[2,14],48:[2,14],49:[2,14],51:[2,14],53:[2,14],54:[2,14],55:[2,14],57:[2,14]},{9:[2,15],12:[2,15],15:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],29:[2,15],31:[2,15],32:[2,15],45:[2,15],48:[2,15],49:[2,15],51:[2,15],53:[2,15],54:[2,15],55:[2,15],57:[2,15]},{9:[1,64],29:[1,65]},{9:[2,20],29:[2,20]},{9:[2,24],29:[2,24]},{9:[2,25],19:58,23:[1,59],24:[1,60],29:[2,25]},{13:16,14:10,15:[1,14],30:9,31:[1,13],32:[1,66],44:68,45:[1,69],47:7,48:[1,11],49:[1,67],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{42:[2,35],43:[2,35],46:[2,35]},{42:[2,36],43:[2,36],46:[2,36]},{42:[2,37],43:[2,37],46:[2,37]},{42:[2,26],43:[2,26],46:[2,26]},{42:[2,27],43:[2,27],46:[2,27]},{52:[1,70]},{9:[1,71],29:[1,65]},{5:[1,44],15:[1,43],18:72,20:42,22:45},{5:[2,16],15:[2,16]},{5:[2,17],15:[2,17]},{5:[1,44],15:[1,43],20:73,22:45},{5:[2,18],15:[2,18]},{5:[2,19],15:[2,19]},{9:[2,22],12:[2,22],15:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],29:[2,22],31:[2,22],32:[2,22],45:[2,22],48:[2,22],49:[2,22],51:[2,22],53:[2,22],54:[2,22],55:[2,22],57:[2,22]},{5:[1,44],6:[1,48],15:[1,43],17:49,18:41,20:42,22:45,28:74},{48:[1,75]},{11:76,13:3,14:10,15:[1,14],30:9,31:[1,13],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{32:[1,77],49:[1,78]},{15:[1,23],40:79,41:22},{5:[1,44],15:[1,43],20:80,22:45},{11:81,13:3,14:10,15:[1,14],30:9,31:[1,13],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{9:[2,10],12:[2,10],15:[2,10],21:61,23:[2,10],24:[2,10],25:[1,62],26:[1,63],29:[2,10],31:[2,10],32:[2,10],45:[2,10],48:[2,10],49:[2,10],51:[2,10],53:[2,10],54:[2,10],55:[2,10],57:[2,10]},{9:[2,12],12:[2,12],15:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],29:[2,12],31:[2,12],32:[2,12],45:[2,12],48:[2,12],49:[2,12],51:[2,12],53:[2,12],54:[2,12],55:[2,12],57:[2,12]},{9:[2,21],29:[2,21]},{12:[2,40],15:[2,40],31:[2,40],32:[2,40],45:[2,40],48:[2,40],49:[2,40],51:[2,40],53:[2,40],54:[2,40],55:[2,40],57:[2,40]},{13:16,14:10,15:[1,14],30:9,31:[1,13],32:[1,82],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{48:[1,83]},{11:84,13:3,14:10,15:[1,14],30:9,31:[1,13],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{42:[1,29],43:[1,30],46:[1,85]},{11:86,13:3,14:10,15:[1,14],30:9,31:[1,13],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{13:16,14:10,15:[1,14],30:9,31:[1,13],32:[1,87],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{48:[1,88]},{12:[2,42],15:[2,42],31:[2,42],32:[2,42],45:[2,42],48:[2,42],49:[2,42],51:[2,42],53:[2,42],54:[2,42],55:[2,42],57:[2,42]},{13:16,14:10,15:[1,14],30:9,31:[1,13],32:[1,89],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{11:90,13:3,14:10,15:[1,14],30:9,31:[1,13],47:7,48:[1,11],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{13:16,14:10,15:[1,14],30:9,31:[1,13],47:7,48:[1,11],50:8,51:[1,12],53:[1,91],54:[1,4],55:[1,5],57:[1,6]},{31:[1,92]},{12:[2,41],15:[2,41],31:[2,41],32:[2,41],45:[2,41],48:[2,41],49:[2,41],51:[2,41],53:[2,41],54:[2,41],55:[2,41],57:[2,41]},{48:[1,93]},{13:16,14:10,15:[1,14],30:9,31:[1,13],32:[2,38],44:94,45:[1,69],47:7,48:[1,11],49:[2,38],50:8,51:[1,12],54:[1,4],55:[1,5],57:[1,6]},{12:[2,44],15:[2,44],31:[2,44],32:[2,44],45:[2,44],48:[2,44],49:[2,44],51:[2,44],53:[2,44],54:[2,44],55:[2,44],57:[2,44]},{12:[2,23],15:[2,23],31:[2,23],32:[2,23],45:[2,23],48:[2,23],49:[2,23],51:[2,23],53:[2,23],54:[2,23],55:[2,23],57:[2,23]},{12:[2,43],15:[2,43],31:[2,43],32:[2,43],45:[2,43],48:[2,43],49:[2,43],51:[2,43],53:[2,43],54:[2,43],55:[2,43],57:[2,43]},{32:[2,39],49:[2,39]}],
defaultActions: {15:[2,5]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* ignore comments */
break;
case 2://
break;
case 3:return 54;
break;
case 4:return 55;
break;
case 5:return 56;
break;
case 6:return 57;
break;
case 7:return 51;
break;
case 8:return 53;
break;
case 9:return 52;
break;
case 10:return 31;
break;
case 11:return 45;
break;
case 12:return 48;
break;
case 13:return 46;
break;
case 14:return 49;
break;
case 15:return 32;
break;
case 16:return 43;
break;
case 17:return 42;
break;
case 18:return 15;
break;
case 19:return 5;
break;
case 20:return 6;
break;
case 21:return 35;
break;
case 22:return 37;
break;
case 23:return 36;
break;
case 24:return 16;
break;
case 25:return 39;
break;
case 26:return 38;
break;
case 27:return 7;
break;
case 28:return 9;
break;
case 29:return 29;
break;
case 30:return 25;
break;
case 31:return 26;
break;
case 32:return 23;
break;
case 33:return 24;
break;
case 34:return 12;
break;
case 35:return 'INVALID';
break;
}
},
rules: [/^(?:\s+)/,/^(?:'.*)/,/^(?:REM.*)/,/^(?:Dim\b)/,/^(?:Option\b)/,/^(?:Explicit\b)/,/^(?:([Cc])([Aa])([Ll])([Ll]))/,/^(?:([Ff])([Oo])([Rr]))/,/^(?:([Nn])([Ee])([Xx])([Tt]))/,/^(?:([Tt])([Oo]))/,/^(?:([Ff])([Uu])([Nn])([Cc])([Tt])([Ii])([Oo])([Nn]))/,/^(?:([Ee])([Ll])([Ss])([Ee])([Ii])([Ff]))/,/^(?:([Ii])([Ff]))/,/^(?:([Tt])([Hh])([Ee])([Nn]))/,/^(?:([Ee])([Ll])([Ss])([Ee]))/,/^(?:([Ee])([Nn])([Dd]))/,/^(?:([Oo])([Rr]))/,/^(?:([Aa])([Nn])([Dd]))/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^\\"])*")/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = vbs;
exports.Parser = vbs.Parser;
exports.parse = function () { return vbs.parse.apply(vbs, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}