/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var vbs = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"primary_expression":3,"IDENTIFIER":4,"NUMBER":5,"STR_CONST":6,"(":7,"expression":8,")":9,"script":10,"statement_list":11,"EOF":12,"else_if_clause":13,"else_clause":14,"ELSEIF":15,"THEN":16,"ELSE":17,"case_list":18,"CASE":19,"selection_statement":20,"IF":21,"END":22,"SELECT":23,"for_statement":24,"FOR":25,"=":26,"TO":27,"factor":28,"expr_list":29,"NEXT":30,"statement":31,"declaration_statement":32,"DIM":33,"assignment_expression":34,"logical_or_expression":35,"unary_expression":36,"logical_and_expression":37,"OR":38,"equality_expression":39,"AND":40,"relational_expression":41,"NE_OP":42,"additive_expression":43,"<":44,">":45,"LE_OP":46,"GE_OP":47,"cast_expression":48,"multiplicative_expression":49,"*":50,"/":51,"%":52,"+":53,"-":54,"postfix_expression":55,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENTIFIER",5:"NUMBER",6:"STR_CONST",7:"(",9:")",12:"EOF",15:"ELSEIF",16:"THEN",17:"ELSE",19:"CASE",21:"IF",22:"END",23:"SELECT",25:"FOR",26:"=",27:"TO",28:"factor",29:"expr_list",30:"NEXT",33:"DIM",38:"OR",40:"AND",42:"NE_OP",44:"<",45:">",46:"LE_OP",47:"GE_OP",50:"*",51:"/",52:"%",53:"+",54:"-"},
productions_: [0,[3,1],[3,1],[3,1],[3,3],[10,2],[13,1],[13,5],[14,2],[18,3],[18,4],[18,4],[20,6],[20,7],[20,6],[24,8],[11,1],[11,2],[32,2],[8,1],[34,1],[34,3],[35,1],[35,3],[37,1],[37,3],[39,1],[39,3],[39,3],[41,1],[41,3],[41,3],[41,3],[41,3],[48,1],[49,1],[49,3],[49,3],[49,3],[43,1],[43,3],[43,3],[36,1],[55,1],[31,1],[31,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,10:1,11:2,20:6,21:[1,9],23:[1,10],31:3,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{1:[3]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,12:[1,25],20:6,21:[1,9],23:[1,10],31:26,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{4:[2,16],5:[2,16],6:[2,16],7:[2,16],12:[2,16],15:[2,16],17:[2,16],19:[2,16],21:[2,16],22:[2,16],23:[2,16],33:[2,16]},{4:[2,44],5:[2,44],6:[2,44],7:[2,44],12:[2,44],15:[2,44],17:[2,44],19:[2,44],21:[2,44],22:[2,44],23:[2,44],33:[2,44]},{4:[2,45],5:[2,45],6:[2,45],7:[2,45],12:[2,45],15:[2,45],17:[2,45],19:[2,45],21:[2,45],22:[2,45],23:[2,45],33:[2,45]},{4:[2,46],5:[2,46],6:[2,46],7:[2,46],12:[2,46],15:[2,46],17:[2,46],19:[2,46],21:[2,46],22:[2,46],23:[2,46],33:[2,46]},{4:[1,27]},{4:[2,19],5:[2,19],6:[2,19],7:[2,19],9:[2,19],12:[2,19],15:[2,19],16:[2,19],17:[2,19],19:[2,19],21:[2,19],22:[2,19],23:[2,19],33:[2,19]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:28,34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{19:[1,29]},{4:[2,20],5:[2,20],6:[2,20],7:[2,20],9:[2,20],12:[2,20],15:[2,20],16:[2,20],17:[2,20],19:[2,20],21:[2,20],22:[2,20],23:[2,20],33:[2,20],38:[1,30]},{4:[2,34],5:[2,34],6:[2,34],7:[2,34],9:[2,34],12:[2,34],15:[2,34],16:[2,34],17:[2,34],19:[2,34],21:[2,34],22:[2,34],23:[2,34],26:[1,31],33:[2,34],38:[2,34],40:[2,34],42:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],50:[2,34],51:[2,34],52:[2,34],53:[2,34],54:[2,34]},{4:[2,22],5:[2,22],6:[2,22],7:[2,22],9:[2,22],12:[2,22],15:[2,22],16:[2,22],17:[2,22],19:[2,22],21:[2,22],22:[2,22],23:[2,22],33:[2,22],38:[2,22],40:[1,32]},{4:[2,42],5:[2,42],6:[2,42],7:[2,42],9:[2,42],12:[2,42],15:[2,42],16:[2,42],17:[2,42],19:[2,42],21:[2,42],22:[2,42],23:[2,42],26:[2,42],33:[2,42],38:[2,42],40:[2,42],42:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],50:[2,42],51:[2,42],52:[2,42],53:[2,42],54:[2,42]},{4:[2,24],5:[2,24],6:[2,24],7:[2,24],9:[2,24],12:[2,24],15:[2,24],16:[2,24],17:[2,24],19:[2,24],21:[2,24],22:[2,24],23:[2,24],26:[1,33],33:[2,24],38:[2,24],40:[2,24],42:[1,34]},{4:[2,43],5:[2,43],6:[2,43],7:[2,43],9:[2,43],12:[2,43],15:[2,43],16:[2,43],17:[2,43],19:[2,43],21:[2,43],22:[2,43],23:[2,43],26:[2,43],33:[2,43],38:[2,43],40:[2,43],42:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],50:[2,43],51:[2,43],52:[2,43],53:[2,43],54:[2,43]},{4:[2,26],5:[2,26],6:[2,26],7:[2,26],9:[2,26],12:[2,26],15:[2,26],16:[2,26],17:[2,26],19:[2,26],21:[2,26],22:[2,26],23:[2,26],26:[2,26],33:[2,26],38:[2,26],40:[2,26],42:[2,26],44:[1,35],45:[1,36],46:[1,37],47:[1,38]},{4:[2,1],5:[2,1],6:[2,1],7:[2,1],9:[2,1],12:[2,1],15:[2,1],16:[2,1],17:[2,1],19:[2,1],21:[2,1],22:[2,1],23:[2,1],26:[2,1],33:[2,1],38:[2,1],40:[2,1],42:[2,1],44:[2,1],45:[2,1],46:[2,1],47:[2,1],50:[2,1],51:[2,1],52:[2,1],53:[2,1],54:[2,1]},{4:[2,2],5:[2,2],6:[2,2],7:[2,2],9:[2,2],12:[2,2],15:[2,2],16:[2,2],17:[2,2],19:[2,2],21:[2,2],22:[2,2],23:[2,2],26:[2,2],33:[2,2],38:[2,2],40:[2,2],42:[2,2],44:[2,2],45:[2,2],46:[2,2],47:[2,2],50:[2,2],51:[2,2],52:[2,2],53:[2,2],54:[2,2]},{4:[2,3],5:[2,3],6:[2,3],7:[2,3],9:[2,3],12:[2,3],15:[2,3],16:[2,3],17:[2,3],19:[2,3],21:[2,3],22:[2,3],23:[2,3],26:[2,3],33:[2,3],38:[2,3],40:[2,3],42:[2,3],44:[2,3],45:[2,3],46:[2,3],47:[2,3],50:[2,3],51:[2,3],52:[2,3],53:[2,3],54:[2,3]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:39,34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{4:[2,29],5:[2,29],6:[2,29],7:[2,29],9:[2,29],12:[2,29],15:[2,29],16:[2,29],17:[2,29],19:[2,29],21:[2,29],22:[2,29],23:[2,29],26:[2,29],33:[2,29],38:[2,29],40:[2,29],42:[2,29],44:[2,29],45:[2,29],46:[2,29],47:[2,29],53:[1,40],54:[1,41]},{4:[2,39],5:[2,39],6:[2,39],7:[2,39],9:[2,39],12:[2,39],15:[2,39],16:[2,39],17:[2,39],19:[2,39],21:[2,39],22:[2,39],23:[2,39],26:[2,39],33:[2,39],38:[2,39],40:[2,39],42:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],50:[1,42],51:[1,43],52:[1,44],53:[2,39],54:[2,39]},{4:[2,35],5:[2,35],6:[2,35],7:[2,35],9:[2,35],12:[2,35],15:[2,35],16:[2,35],17:[2,35],19:[2,35],21:[2,35],22:[2,35],23:[2,35],26:[2,35],33:[2,35],38:[2,35],40:[2,35],42:[2,35],44:[2,35],45:[2,35],46:[2,35],47:[2,35],50:[2,35],51:[2,35],52:[2,35],53:[2,35],54:[2,35]},{1:[2,5]},{4:[2,17],5:[2,17],6:[2,17],7:[2,17],12:[2,17],15:[2,17],17:[2,17],19:[2,17],21:[2,17],22:[2,17],23:[2,17],33:[2,17]},{4:[2,18],5:[2,18],6:[2,18],7:[2,18],12:[2,18],15:[2,18],17:[2,18],19:[2,18],21:[2,18],22:[2,18],23:[2,18],33:[2,18]},{16:[1,45]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:46,34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,37:47,39:15,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],34:49,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,39:50,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,41:51,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,41:52,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,43:53,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,43:54,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,43:55,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,43:56,48:24,49:23,55:14},{9:[1,57]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,48:24,49:58,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,48:24,49:59,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,48:60,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,48:61,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],36:48,48:62,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,11:63,20:6,21:[1,9],23:[1,10],31:3,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{18:64,19:[1,65]},{4:[2,23],5:[2,23],6:[2,23],7:[2,23],9:[2,23],12:[2,23],15:[2,23],16:[2,23],17:[2,23],19:[2,23],21:[2,23],22:[2,23],23:[2,23],33:[2,23],38:[2,23],40:[1,32]},{4:[2,34],5:[2,34],6:[2,34],7:[2,34],9:[2,34],12:[2,34],15:[2,34],16:[2,34],17:[2,34],19:[2,34],21:[2,34],22:[2,34],23:[2,34],26:[2,34],33:[2,34],38:[2,34],40:[2,34],42:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],50:[2,34],51:[2,34],52:[2,34],53:[2,34],54:[2,34]},{4:[2,21],5:[2,21],6:[2,21],7:[2,21],9:[2,21],12:[2,21],15:[2,21],16:[2,21],17:[2,21],19:[2,21],21:[2,21],22:[2,21],23:[2,21],33:[2,21]},{4:[2,25],5:[2,25],6:[2,25],7:[2,25],9:[2,25],12:[2,25],15:[2,25],16:[2,25],17:[2,25],19:[2,25],21:[2,25],22:[2,25],23:[2,25],26:[1,33],33:[2,25],38:[2,25],40:[2,25],42:[1,34]},{4:[2,27],5:[2,27],6:[2,27],7:[2,27],9:[2,27],12:[2,27],15:[2,27],16:[2,27],17:[2,27],19:[2,27],21:[2,27],22:[2,27],23:[2,27],26:[2,27],33:[2,27],38:[2,27],40:[2,27],42:[2,27],44:[1,35],45:[1,36],46:[1,37],47:[1,38]},{4:[2,28],5:[2,28],6:[2,28],7:[2,28],9:[2,28],12:[2,28],15:[2,28],16:[2,28],17:[2,28],19:[2,28],21:[2,28],22:[2,28],23:[2,28],26:[2,28],33:[2,28],38:[2,28],40:[2,28],42:[2,28],44:[1,35],45:[1,36],46:[1,37],47:[1,38]},{4:[2,30],5:[2,30],6:[2,30],7:[2,30],9:[2,30],12:[2,30],15:[2,30],16:[2,30],17:[2,30],19:[2,30],21:[2,30],22:[2,30],23:[2,30],26:[2,30],33:[2,30],38:[2,30],40:[2,30],42:[2,30],44:[2,30],45:[2,30],46:[2,30],47:[2,30],53:[1,40],54:[1,41]},{4:[2,31],5:[2,31],6:[2,31],7:[2,31],9:[2,31],12:[2,31],15:[2,31],16:[2,31],17:[2,31],19:[2,31],21:[2,31],22:[2,31],23:[2,31],26:[2,31],33:[2,31],38:[2,31],40:[2,31],42:[2,31],44:[2,31],45:[2,31],46:[2,31],47:[2,31],53:[1,40],54:[1,41]},{4:[2,32],5:[2,32],6:[2,32],7:[2,32],9:[2,32],12:[2,32],15:[2,32],16:[2,32],17:[2,32],19:[2,32],21:[2,32],22:[2,32],23:[2,32],26:[2,32],33:[2,32],38:[2,32],40:[2,32],42:[2,32],44:[2,32],45:[2,32],46:[2,32],47:[2,32],53:[1,40],54:[1,41]},{4:[2,33],5:[2,33],6:[2,33],7:[2,33],9:[2,33],12:[2,33],15:[2,33],16:[2,33],17:[2,33],19:[2,33],21:[2,33],22:[2,33],23:[2,33],26:[2,33],33:[2,33],38:[2,33],40:[2,33],42:[2,33],44:[2,33],45:[2,33],46:[2,33],47:[2,33],53:[1,40],54:[1,41]},{4:[2,4],5:[2,4],6:[2,4],7:[2,4],9:[2,4],12:[2,4],15:[2,4],16:[2,4],17:[2,4],19:[2,4],21:[2,4],22:[2,4],23:[2,4],26:[2,4],33:[2,4],38:[2,4],40:[2,4],42:[2,4],44:[2,4],45:[2,4],46:[2,4],47:[2,4],50:[2,4],51:[2,4],52:[2,4],53:[2,4],54:[2,4]},{4:[2,40],5:[2,40],6:[2,40],7:[2,40],9:[2,40],12:[2,40],15:[2,40],16:[2,40],17:[2,40],19:[2,40],21:[2,40],22:[2,40],23:[2,40],26:[2,40],33:[2,40],38:[2,40],40:[2,40],42:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],50:[1,42],51:[1,43],52:[1,44],53:[2,40],54:[2,40]},{4:[2,41],5:[2,41],6:[2,41],7:[2,41],9:[2,41],12:[2,41],15:[2,41],16:[2,41],17:[2,41],19:[2,41],21:[2,41],22:[2,41],23:[2,41],26:[2,41],33:[2,41],38:[2,41],40:[2,41],42:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],50:[1,42],51:[1,43],52:[1,44],53:[2,41],54:[2,41]},{4:[2,36],5:[2,36],6:[2,36],7:[2,36],9:[2,36],12:[2,36],15:[2,36],16:[2,36],17:[2,36],19:[2,36],21:[2,36],22:[2,36],23:[2,36],26:[2,36],33:[2,36],38:[2,36],40:[2,36],42:[2,36],44:[2,36],45:[2,36],46:[2,36],47:[2,36],50:[2,36],51:[2,36],52:[2,36],53:[2,36],54:[2,36]},{4:[2,37],5:[2,37],6:[2,37],7:[2,37],9:[2,37],12:[2,37],15:[2,37],16:[2,37],17:[2,37],19:[2,37],21:[2,37],22:[2,37],23:[2,37],26:[2,37],33:[2,37],38:[2,37],40:[2,37],42:[2,37],44:[2,37],45:[2,37],46:[2,37],47:[2,37],50:[2,37],51:[2,37],52:[2,37],53:[2,37],54:[2,37]},{4:[2,38],5:[2,38],6:[2,38],7:[2,38],9:[2,38],12:[2,38],15:[2,38],16:[2,38],17:[2,38],19:[2,38],21:[2,38],22:[2,38],23:[2,38],26:[2,38],33:[2,38],38:[2,38],40:[2,38],42:[2,38],44:[2,38],45:[2,38],46:[2,38],47:[2,38],50:[2,38],51:[2,38],52:[2,38],53:[2,38],54:[2,38]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,13:67,14:68,15:[1,69],17:[1,70],20:6,21:[1,9],22:[1,66],23:[1,10],31:26,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{19:[1,72],22:[1,71]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:73,34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{21:[1,74]},{22:[1,75]},{22:[2,6]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:76,34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,11:77,20:6,21:[1,9],23:[1,10],31:3,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{23:[1,78]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:79,17:[1,80],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,11:81,20:6,21:[1,9],23:[1,10],31:3,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{4:[2,12],5:[2,12],6:[2,12],7:[2,12],12:[2,12],15:[2,12],17:[2,12],19:[2,12],21:[2,12],22:[2,12],23:[2,12],33:[2,12]},{21:[1,82]},{16:[1,83]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,20:6,21:[1,9],22:[2,8],23:[1,10],31:26,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{4:[2,14],5:[2,14],6:[2,14],7:[2,14],12:[2,14],15:[2,14],17:[2,14],19:[2,14],21:[2,14],22:[2,14],23:[2,14],33:[2,14]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,11:84,20:6,21:[1,9],23:[1,10],31:3,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,11:85,20:6,21:[1,9],23:[1,10],31:3,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,19:[2,9],20:6,21:[1,9],22:[2,9],23:[1,10],31:26,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{4:[2,13],5:[2,13],6:[2,13],7:[2,13],12:[2,13],15:[2,13],17:[2,13],19:[2,13],21:[2,13],22:[2,13],23:[2,13],33:[2,13]},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,11:86,20:6,21:[1,9],23:[1,10],31:3,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,19:[2,10],20:6,21:[1,9],22:[2,10],23:[1,10],31:26,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,19:[2,11],20:6,21:[1,9],22:[2,11],23:[1,10],31:26,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{3:16,4:[1,18],5:[1,19],6:[1,20],7:[1,21],8:5,13:87,14:68,15:[1,69],17:[1,70],20:6,21:[1,9],23:[1,10],31:26,32:4,33:[1,7],34:8,35:11,36:12,37:13,39:15,41:17,43:22,48:24,49:23,55:14},{22:[2,7]}],
defaultActions: {25:[2,5],68:[2,6],87:[2,7]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* ignore comments */
break;
case 2://
break;
case 3:return 33;
break;
case 4:return 'OPTION';
break;
case 5:return 'EXPLICIT';
break;
case 6:return 'CALL';
break;
case 7:return 25;
break;
case 8:return 30;
break;
case 9:return 27;
break;
case 10:return 'FUNCTION';
break;
case 11:return 15;
break;
case 12:return 21;
break;
case 13:return 16;
break;
case 14:return 17;
break;
case 15:return 22;
break;
case 16:return 38;
break;
case 17:return 40;
break;
case 18:return 23;
break;
case 19:return 19;
break;
case 20:return 4;
break;
case 21:return 5;
break;
case 22:return 6;
break;
case 23:return 46;
break;
case 24:return 47;
break;
case 25:return 42;
break;
case 26:return 26;
break;
case 27:return 45;
break;
case 28:return 44;
break;
case 29:return 7;
break;
case 30:return 9;
break;
case 31:return ',';
break;
case 32:return 50;
break;
case 33:return 51;
break;
case 34:return 53;
break;
case 35:return 54;
break;
case 36:return '.';
break;
case 37:return 12;
break;
case 38:return 'INVALID';
break;
case 39:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:'.*)/,/^(?:REM.*)/,/^(?:Dim)/,/^(?:Option)/,/^(?:Explicit)/,/^(?:([Cc])([Aa])([Ll])([Ll]))/,/^(?:([Ff])([Oo])([Rr]))/,/^(?:([Nn])([Ee])([Xx])([Tt]))/,/^(?:([Tt])([Oo]))/,/^(?:([Ff])([Uu])([Nn])([Cc])([Tt])([Ii])([Oo])([Nn]))/,/^(?:([Ee])([Ll])([Ss])([Ee])([Ii])([Ff]))/,/^(?:([Ii])([Ff]))/,/^(?:([Tt])([Hh])([Ee])([Nn]))/,/^(?:([Ee])([Ll])([Ss])([Ee]))/,/^(?:([Ee])([Nn])([Dd]))/,/^(?:([Oo])([Rr]))/,/^(?:([Aa])([Nn])([Dd]))/,/^(?:([Ss])([Ee])([Ll])([Ee])([Cc])([Tt]))/,/^(?:([Cc])([Aa])([Ss])([Ee]))/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^\\"])*")/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:\.)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = vbs;
exports.Parser = vbs.Parser;
exports.parse = function () { return vbs.parse.apply(vbs, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}